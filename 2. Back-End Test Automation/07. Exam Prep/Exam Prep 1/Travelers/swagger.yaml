openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: http://localhost:5000/api/
info:
  version: "1.0.0"
  title: Travelers
  description: SoftUni project
paths:
  /user/register:
    post:
      tags:
        - Auth
      summary: Register a new user
      description: API to register new users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstname:
                  type: string
                  example: John
                lastname:
                  type: string
                  example: Doe
                email:
                  type: string
                  format: email
                  example: john.doe@example.com
                  description: The email address of the user
                password:
                  type: string
                  example: "password123"
                  description: The password of the user
      responses:
        '200':
          description: Created - User successfully registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    example: "6686b7e3f5be4cf9a824fe51"
                  firstname:
                    type: string
                    example: John
                  lastname:
                    type: string
                    example: Doe
                  email:
                    type: string
                    format: email
                    example: john.doe@example.com
                  password:
                    type: string
                    example: "$2b$10$ZRxN4KPxuF.2BPtfPCIJ4OIpADvF860dohIpCxU5/lwvTT4ZmMDp2"
        '500':
          description: Bad Request - Invalid request body or user already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User Already Exists
  /user/login:
    post:
      tags:
        - Auth
      summary: Login user
      description: API to authenticate and login users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: john.doe@example.com
                  description: The email address of the user
                password:
                  type: string
                  example: "password123"
                  description: The password of the user
      responses:
        '200':
          description: OK - User successfully authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    example: 5ffcb9f84c9c1044dcf65f2a
                  firstname:
                    type: string
                    example: John
                  lastname:
                    type: string
                    example: Doe
                  email:
                    type: string
                    format: email
                    example: john.doe@example.com
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsIn..."
                    description: JWT token for authenticated user
        '500':
          description: Bad Request - Invalid request body or user already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid Credentials
  /user/logout:
    get:
      summary: Logout User
      description: API for logging out users and clearing refresh token from cookies
      tags:
        - Auth
      responses:
        '204':
          description: No Content - Successfully logged out
        '500':
          description: Internal Server Error - No refresh token found in cookies
  /category:
    get:
      summary: Retrieve all categories
      description: This API manages movie categories within the application.
      tags:
        - Category
      responses:
        '200':
          description: A list of all categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        '500':
          description: Internal Server Error - Something went wrong
    post:
      summary: Create a new category
      description: This API manages movie categories within the application.
      tags:
        - Category
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              example:
                name: Wildlife
      responses:
        '200':
          description: Category created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '500':
          description: Internal Server Error - Something went wrong
  /category/{categoryId}:
    get:
      summary: Get a category by ID
      description: This API manages movie categories within the application.
      tags:
        - Category
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: string
          description: ID of the category to get.
      responses:
        '200':
          description: Category found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '500':
          description: Internal Server Error - This id is not valid or not Found
    put:
      summary: Update a category by ID
      description: This API manages movies categories within the application.
      tags:
        - Category
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: string
          description: ID of the category to update.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              example:
                name: Countryside
      responses:
        '200':
          description: Updated category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '500':
          description: Internal Server Error - This id is not valid or not Found
    delete:
      summary: Delete a category by ID
      description: This API manages movie categories within the application.
      tags:
        - Category
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: string
          description: ID of the category to delete.
      security:
        - bearerAuth: []    
      responses:
        '200':
          description: Deleted category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '500':
          description: Internal Server Error - This id is not valid or not Found
  /destination:
    get:
      summary: Get all destinations
      description: Retrieve a list of all destinations, with optional query parameters for filtering, sorting, and pagination.
      tags:
        - Destination
      responses:
        '200':
          description: A list of destinations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Destination'
        '500':
          description: Internal Server Error
    post:
      summary: Create a new destination
      description: Create a new destination with the provided details. Requires authentication.
      tags:
        - Destination
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Destination'
      responses:
        '200':
          description: The created destination
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Destination'
        '500':
          description: Internal Server Error - There is no token attached to header
  /destination/{id}:
    get:
      summary: Get a destination by ID
      description: Retrieve a destination by its ID.
      tags:
        - Destination
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The destination ID
      responses:
        '200':
          description: The destination details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Destination'
        '500':
          description: Internal Server Error
    put:
      summary: Update a destination by ID
      description: Update a destination with the provided details by its ID. Requires authentication.
      tags:
        - Destination
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The destination ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Destination'
      responses:
        '200':
          description: The updated destination
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Destination'
        '500':
          description: Internal Server Error - This id is not valid or not Found
    delete:
      summary: Delete a destination by ID
      description: Delete a destination by its ID. Requires authentication.
      tags:
        - Destination
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The destination ID
      responses:
        '200':
          description: The deleted destination
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Destination'
        '500':
          description: Internal Server Error - This id is not valid or not Found
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
      Category:
        type: object
        required:
          - name
        properties:
          _id:
            type: string
            description: The unique identifier for the destination category
          name:
            type: string
            description: The name of the destination category
            unique: true
            index: true
          __v:
            type: integer
            description: The version key for the document
          createdAt:
            type: string
            format: date-time
            description: The date and time when the category was created
          updatedAt:
            type: string
            format: date-time
            description: The date and time when the category was last updated
        example:
          _id: "6716b5e535521560572f28cc"
          name: "Name of the category"
          __v: 0
          createdAt: "2024-10-21T20:13:25.395Z"
          updatedAt: "2024-10-21T20:13:25.395Z"
      Destination:
        type: object
        properties:
          name:
            type: string
            description: "Name of the destination"
            trim: true
            required: true
          location:
            type: string
            description: "Location of the destination"
            required: true
          description:
            type: string
            description: "Description of the destination"
            required: true
          attractions:
            type: array
            items:
              type: string
            description: "List of attractions at the destination"
            required: true
          bestTimeToVisit:
            type: string
            description: "Best time to visit the destination"
            required: true
          category:
            type: string
            description: "Reference to the category"
            $ref: '#/components/schemas/Category'
            required: true
          ratings:
            type: array
            description: "List of ratings"
            items:
              type: object
              properties:
                star:
                  type: integer
                  description: "Rating star value"
                  example: 5
                comment:
                  type: string
                  description: "Rating comment"
                  example: "Amazing destination!"
                postedby:
                  type: string
                  description: "Reference to User"
                  example: "60d21b2f9fd3c72a4c6f5b5b"
          imageUrls:
            type: array
            items:
              type: string
            description: "List of image URLs for the destination"
        timestamps: true
        example:
          name: "Maui Beach"
          location: "Hawaii, USA"
          description: "A beautiful beach with crystal clear waters and white sands."
          attractions:
            - "Surfing"
            - "Sunbathing"
            - "Snorkeling"
          bestTimeToVisit: "April to October"
          category: "Beaches"
          ratings:
            - star: 5
              comment: "Amazing place!"
              postedby: "60d21b2f9fd3c72a4c6f5b5b"
          imageUrls:
            - "url_to_image1"
            - "url_to_image2"
      User:
        type: object
        required:
          - firstname
          - lastname
          - email
          - password
        properties:
          firstname:
            type: string
            description: The first name of the user
          lastname:
            type: string
            description: The last name of the user
          email:
            type: string
            description: The email address of the user
            unique: true
          password:
            type: string
            description: The password of the user
        example:
          firstname: "John"
          lastname: "Doe"
          email: "john.doe@example.com"
          password: "password123"
