openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: http://localhost:5000/api/
info:
  version: "1.0.0"
  title: Recipe Book
  description: SoftUni project
paths:
  /user/register:
    post:
      tags:
        - Auth
      summary: Register a new user
      description: API to register new users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstname:
                  type: string
                  example: John
                lastname:
                  type: string
                  example: Doe
                email:
                  type: string
                  format: email
                  example: john.doe@example.com
                  description: The email address of the user
                password:
                  type: string
                  example: "password123"
                  description: The password of the user
      responses:
        '200':
          description: Created - User successfully registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    example: "6686b7e3f5be4cf9a824fe51"
                  firstname:
                    type: string
                    example: John
                  lastname:
                    type: string
                    example: Doe
                  email:
                    type: string
                    format: email
                    example: john.doe@example.com
                  password:
                    type: string
                    example: "$2b$10$ZRxN4KPxuF.2BPtfPCIJ4OIpADvF860dohIpCxU5/lwvTT4ZmMDp2"
        '500':
          description: Bad Request - Invalid request body or user already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User Already Exists
  /user/login:
    post:
      tags:
        - Auth
      summary: Login user
      description: API to authenticate and login users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: john.doe@example.com
                  description: The email address of the user
                password:
                  type: string
                  example: "password123"
                  description: The password of the user
      responses:
        '200':
          description: OK - User successfully authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    example: 5ffcb9f84c9c1044dcf65f2a
                  firstname:
                    type: string
                    example: John
                  lastname:
                    type: string
                    example: Doe
                  email:
                    type: string
                    format: email
                    example: john.doe@example.com
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsIn..."
                    description: JWT token for authenticated user
        '500':
          description: Bad Request - Invalid request body or user already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid Credentials
  /user/logout:
    get:
      summary: Logout User
      description: API for logging out users and clearing refresh token from cookies
      tags:
        - Auth
      responses:
        '204':
          description: No Content - Successfully logged out
        '500':
          description: Internal Server Error - No refresh token found in cookies
  /category:
    get:
      summary: Retrieve all categories
      description: This API manages movie categories within the application.
      tags:
        - Category
      responses:
        '200':
          description: A list of all categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        '500':
          description: Internal Server Error - Something went wrong
    post:
      summary: Create a new category
      description: This API manages movie categories within the application.
      tags:
        - Category
      security:
        - bearerAuth: [] 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              example:
                name: Gluten-Free
      responses:
        '200':
          description: Category created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '500':
          description: Internal Server Error - Something went wrong
  /category/{categoryId}:
    get:
      summary: Get a category by ID
      description: This API manages movie categories within the application.
      tags:
        - Category
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: string
          description: ID of the category to get.
      responses:
        '200':
          description: Category found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '500':
          description: Internal Server Error - This id is not valid or not Found
    put:
      summary: Update a category by ID
      description: This API manages movies categories within the application.
      tags:
        - Category
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: string
          description: ID of the category to update.
      security:
        - bearerAuth: [] 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              example:
                name: Keto
      responses:
        '200':
          description: Updated category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '500':
          description: Internal Server Error - This id is not valid or not Found
    delete:
      summary: Delete a category by ID
      description: This API manages movie categories within the application.
      tags:
        - Category
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: string
          description: ID of the category to delete.
      security:
        - bearerAuth: []    
      responses:
        '200':
          description: Deleted category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '500':
          description: Internal Server Error - This id is not valid or not Found
  /recipe:
    get:
      summary: Get all recipes
      description: Retrieve a list of all recipes, with optional query parameters for filtering, sorting, and pagination.
      tags:
        - Recipe
      responses:
        '200':
          description: A list of recipes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recipe'
        '500':
          description: Internal Server Error
    post:
      summary: Create a new recipe
      description: Create a new recipe with the provided details. Requires authentication.
      tags:
        - Recipe
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Recipe'
      responses:
        '200':
          description: The created recipe
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recipe'
        '500':
          description: Internal Server Error - There is no token attached to header
  /recipe/{id}:
    get:
      summary: Get a recipe by ID
      description: Retrieve a recipe by its ID.
      tags:
        - Recipe
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The recipe ID
      responses:
        '200':
          description: The recipe details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recipe'
        '500':
          description: Internal Server Error
    put:
      summary: Update a recipe by ID
      description: Update a recipe with the provided details by its ID. Requires authentication.
      tags:
        - Recipe
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The recipe ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Recipe'
      responses:
        '200':
          description: The updated recipe
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recipe'
        '500':
          description: Internal Server Error - This id is not valid or not Found
    delete:
      summary: Delete a recipe by ID
      description: Delete a recipe by its ID. Requires authentication.
      tags:
        - Recipe
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The recipe ID
      responses:
        '200':
          description: The deleted recipe
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recipe'
        '500':
          description: Internal Server Error - This id is not valid or not Found
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Category:
      type: object
      required:
        - name
      properties:
        _id:
          type: string
          description: The unique identifier for the destination category
        name:
          type: string
          description: The name of the destination category
          unique: true
          index: true
        __v:
          type: integer
          description: The version key for the document
        createdAt:
          type: string
          format: date-time
          description: The date and time when the category was created
        updatedAt:
          type: string
          format: date-time
          description: The date and time when the category was last updated
      example:
        _id: "6716b5e535521560572f28cc"
        name: "Gluten-Free"
        __v: 0
        createdAt: "2024-10-21T20:13:25.395Z"
        updatedAt: "2024-10-21T20:13:25.395Z"
    Recipe:
      type: object
      properties:
        _id:
          type: string
          description: The auto-generated id of the recipe
        title:
          type: string
          description: The title of the recipe
          example: Spaghetti Carbonara
        description:
          type: string
          description: A short description of the recipe
          example: A classic Italian pasta dish made with eggs, cheese, pancetta, and pepper.
        ingredients:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                description: The name of the ingredient
                example: Spaghetti
              quantity:
                type: string
                description: The quantity of the ingredient
                example: 200g
        instructions:
          type: array
          items:
            type: object
            properties:
              step:
                type: string
                description: The instruction step
                example: Cook the spaghetti according to package instructions.
        cookingTime:
          type: number
          description: The cooking time in minutes
          example: 20
        servings:
          type: number
          description: The number of servings
          example: 2
        category:
          type: string
          description: The ID of the category
        author:
          type: string
          description: The ID of the author
        createdAt:
          type: string
          format: date-time
          description: The date and time when the recipe was created
        updatedAt:
          type: string
          format: date-time
          description: The date and time when the recipe was last updated
      required:
        - title
        - ingredients
        - instructions
        - cookingTime
        - servings
        - difficulty
    User:
      type: object
      required:
        - firstname
        - lastname
        - email
        - password
      properties:
        firstname:
          type: string
          description: The first name of the user
        lastname:
          type: string
          description: The last name of the user
        email:
          type: string
          description: The email address of the user
          unique: true
        password:
          type: string
          description: The password of the user
      example:
        firstname: "John"
        lastname: "Doe"
        email: "john.doe@example.com"
        password: "password123"
    